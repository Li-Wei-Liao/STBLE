Index: app/src/main/java/com/example/stble/ScanActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/stble/ScanActivity.java	(date 1597630816468)
+++ app/src/main/java/com/example/stble/ScanActivity.java	(date 1597630816468)
@@ -3,16 +3,15 @@
 import android.Manifest;
 import android.bluetooth.BluetoothAdapter;
 import android.bluetooth.BluetoothDevice;
-import android.bluetooth.BluetoothManager;
-import android.bluetooth.le.BluetoothLeScanner;
-import android.bluetooth.le.ScanCallback;
-import android.bluetooth.le.ScanFilter;
-import android.bluetooth.le.ScanResult;
-import android.bluetooth.le.ScanSettings;
+import android.content.BroadcastReceiver;
+import android.content.ComponentName;
+import android.content.Context;
 import android.content.Intent;
+import android.content.ServiceConnection;
 import android.content.pm.PackageManager;
 import android.os.Bundle;
 import android.os.Handler;
+import android.os.IBinder;
 import android.util.Log;
 import android.widget.ArrayAdapter;
 import android.widget.ListView;
@@ -23,21 +22,20 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
+import java.util.Objects;
 
 public class ScanActivity extends AppCompatActivity {
 
+    private static final String TAG = "SCAN_ACTIVITY";
+    private static final long SCAN_PERIOD = 10000;
     private static final int REQUEST_ENABLE_BT = 42;
-    private static final String TAG = "SCAN_ACTIVITY";
     private static final int REQUEST_FINE_LOCATION = 12;
-    private static final long SCAN_PERIOD = 10000;
+    public static final String ADD_SCAN_RESULT = "Result";
 
-    private BluetoothAdapter mBluetoothAdapter;
     private boolean mScanning = false;
+
+    private BluetoothDevice mSelectedDevice;
     private ArrayList<BluetoothDevice> mScanResults;
-    private BtleScanCallback mScanCallback;
-    private BluetoothLeScanner mBluetoothLeScanner;
-
-    private BluetoothDevice mSelectedDevice;
 
     private SwipeRefreshLayout mSwipeRefreshLayout;
     private String[] mListElements = new String[]{""};
@@ -45,13 +43,17 @@
     private List<String> mListElementsArrayList;
     private ArrayAdapter<String> mAdapter;
 
+    BluetoothHandler mBluetoothHandler;
+
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_client);
-        BluetoothManager bluetoothManager = (BluetoothManager) getSystemService(BLUETOOTH_SERVICE);
-        mBluetoothAdapter = bluetoothManager.getAdapter();
 
+        Intent intent = new Intent(this, BluetoothHandler.class);
+        startService(intent);
+        bindService(intent, mConnection, BIND_AUTO_CREATE);
+        
         mSwipeRefreshLayout = findViewById(R.id.swiperefresh);
         mSwipeRefreshLayout.setOnRefreshListener(() -> {
             finish();
@@ -61,6 +63,19 @@
         });
     }
 
+    ServiceConnection mConnection = new ServiceConnection() {
+        @Override
+        public void onServiceDisconnected(ComponentName name) {
+            mBluetoothHandler = null;
+        }
+
+        @Override
+        public void onServiceConnected(ComponentName name, IBinder service) {
+            BluetoothHandler.LocalBinder mLocalBinder = (BluetoothHandler.LocalBinder)service;
+            mBluetoothHandler = mLocalBinder.getBluetoothHandlerInstance();
+        }
+    };
+
     @Override
     protected void onResume() {
         super.onResume();
@@ -90,62 +105,19 @@
         startScan();
     }
 
-    private class BtleScanCallback extends ScanCallback {
-        @Override
-        public void onScanResult(int callbackType, ScanResult result) {
-            addScanResult(result);
-        }
-
-        @Override
-        public void onBatchScanResults(List<ScanResult> results) {
-            for (ScanResult result : results) {
-                addScanResult(result);
-            }
-        }
-
-        @Override
-        public void onScanFailed(int errorCode) {
-            Log.e(TAG, "BLE Scan Failed with code " + errorCode);
-        }
-
-        private void addScanResult(ScanResult result) {
-            BluetoothDevice device = result.getDevice();
-            if (device.getName() != null) {
-                if (!mScanResults.contains(device)) {
-                    mScanResults.add(device);
-                    mListElementsArrayList.add("Device " + device.getAddress() + " " + device.getName());
-                    Log.d(TAG, "Device " + device.getAddress() + " " + device.getName());
-                    mAdapter.notifyDataSetChanged();
-                }
-            }
-
-        }
-    }
-
     private void startScan() {
         if (!hasPermissions() || mScanning) {
             return;
         }
         runOnUiThread(() -> mSwipeRefreshLayout.setEnabled(false));
-        List<ScanFilter> filters = new ArrayList<>();
-        ScanSettings settings = new ScanSettings.Builder()
-                .setScanMode(ScanSettings.SCAN_MODE_LOW_POWER)
-                .build();
-        mScanResults = new ArrayList<>();
-        mScanCallback = new BtleScanCallback();
-        mBluetoothLeScanner = mBluetoothAdapter.getBluetoothLeScanner();
-        mBluetoothLeScanner.startScan(filters, settings, mScanCallback);
+        mBluetoothHandler.startScan();
         mScanning = true;
         new Handler().postDelayed(this::stopScan, SCAN_PERIOD);
     }
 
     private void stopScan() {
-        if (mScanning && mBluetoothAdapter != null && mBluetoothAdapter.isEnabled() && mBluetoothLeScanner != null) {
-            mBluetoothLeScanner.stopScan(mScanCallback);
+        if(mBluetoothHandler.stopScan())
             scanComplete();
-        }
-
-        mScanCallback = null;
         mScanning = false;
     }
 
@@ -156,8 +128,22 @@
         Log.d(TAG, "Scan complete");
     }
 
+    private class DataUpdateReceiver extends BroadcastReceiver {
+        @Override
+        public void onReceive(Context context, Intent intent) {
+            if (Objects.equals(intent.getAction(), ScanActivity.ADD_SCAN_RESULT)) {
+                mScanResults = mBluetoothHandler.getScanResults();
+
+                BluetoothDevice device = mScanResults.get(mScanResults.size());
+
+                mListElementsArrayList.add("Device " + device.getAddress() + " " + device.getName());
+                Log.d(TAG, "Device " + device.getAddress() + " " + device.getName());
+            }
+        }
+    }
+
     private boolean hasPermissions() {
-        if (mBluetoothAdapter == null || !mBluetoothAdapter.isEnabled()) {
+        if (mBluetoothHandler.getBluetoothAdapter() == null || !mBluetoothHandler.getBluetoothAdapter().isEnabled()) {
             requestBluetoothEnable();
             return false;
         } else if (!hasLocationPermissions()) {
@@ -180,6 +166,4 @@
     private void requestLocationPermission() {
         requestPermissions(new String[]{Manifest.permission.ACCESS_FINE_LOCATION}, REQUEST_FINE_LOCATION);
     }
-
-
 }
\ No newline at end of file
Index: app/src/main/java/com/example/stble/BluetoothHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/stble/BluetoothHandler.java	(date 1597630290683)
+++ app/src/main/java/com/example/stble/BluetoothHandler.java	(date 1597630290683)
@@ -0,0 +1,108 @@
+package com.example.stble;
+
+import android.app.Service;
+import android.bluetooth.BluetoothAdapter;
+import android.bluetooth.BluetoothDevice;
+import android.bluetooth.BluetoothManager;
+import android.bluetooth.le.BluetoothLeScanner;
+import android.bluetooth.le.ScanCallback;
+import android.bluetooth.le.ScanFilter;
+import android.bluetooth.le.ScanResult;
+import android.bluetooth.le.ScanSettings;
+import android.content.Intent;
+import android.os.Binder;
+import android.os.IBinder;
+import android.util.Log;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class BluetoothHandler extends Service {
+
+    IBinder mBinder = new LocalBinder();
+
+    private static final String TAG = "BLUETOOTH_HANDLER";
+
+    public BluetoothAdapter getBluetoothAdapter() {
+        return mBluetoothAdapter;
+    }
+
+    private BluetoothAdapter mBluetoothAdapter;
+
+    public ArrayList<BluetoothDevice> getScanResults() {
+        return mScanResults;
+    }
+
+    private ArrayList<BluetoothDevice> mScanResults;
+    private BluetoothHandler.BtleScanCallback mScanCallback;
+    private BluetoothLeScanner mBluetoothLeScanner;
+
+    @Override
+    public int onStartCommand(Intent intent, int flags, int startId) {
+        BluetoothManager bluetoothManager = (BluetoothManager) getSystemService(BLUETOOTH_SERVICE);
+        mBluetoothAdapter = bluetoothManager.getAdapter();
+
+        return super.onStartCommand(intent, flags, startId);
+    }
+
+    @Override
+    public IBinder onBind(Intent intent) {
+        return null;
+    }
+
+    public class LocalBinder extends Binder {
+        public BluetoothHandler getBluetoothHandlerInstance() {
+            return BluetoothHandler.this;
+        }
+    }
+
+    public void startScan(){
+        List<ScanFilter> filters = new ArrayList<>();
+        ScanSettings settings = new ScanSettings.Builder()
+                .setScanMode(ScanSettings.SCAN_MODE_LOW_POWER)
+                .build();
+        mScanResults = new ArrayList<>();
+        mScanCallback = new BtleScanCallback();
+        mBluetoothLeScanner = mBluetoothAdapter.getBluetoothLeScanner();
+        mBluetoothLeScanner.startScan(filters, settings, mScanCallback);
+    }
+
+    public boolean stopScan(){
+        if (mBluetoothAdapter != null && mBluetoothAdapter.isEnabled() && mBluetoothLeScanner != null) {
+            mBluetoothLeScanner.stopScan(mScanCallback);
+            mScanCallback = null;
+            return true;
+        }
+        return false;
+    }
+
+    private class BtleScanCallback extends ScanCallback {
+        @Override
+        public void onScanResult(int callbackType, ScanResult result) {
+            addScanResult(result);
+        }
+
+        @Override
+        public void onBatchScanResults(List<ScanResult> results) {
+            for (ScanResult result : results) {
+                addScanResult(result);
+            }
+        }
+
+        @Override
+        public void onScanFailed(int errorCode) {
+            Log.e(TAG, "BLE Scan Failed with code " + errorCode);
+        }
+
+        private void addScanResult(ScanResult result) {
+            BluetoothDevice device = result.getDevice();
+            if (device.getName() != null) {
+                if (!mScanResults.contains(device)) {
+                    mScanResults.add(device);
+                    sendBroadcast(new Intent(ScanActivity.ADD_SCAN_RESULT));
+                }
+            }
+
+        }
+    }
+}
